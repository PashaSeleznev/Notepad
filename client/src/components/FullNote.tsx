import { FC, useState } from "react";
import { NoteType } from "../containers/MainContainer";

export type FullNoteProps = {
  note: NoteType,
  onBack: () => void,
  fetchNotes: () => void,
  updateSelectedNote: (updatedNote: NoteType) => void
};

const FullNote: FC<FullNoteProps> = ({ note, onBack, fetchNotes, updateSelectedNote }) => {
  
  const [isEditing, setIsEditing] = useState(false)
  // –§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  const [file, setFile] = useState<File | null>(null)
  // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const [fileName, setFileName] = useState<string>("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
  // –ö–æ–ø–∏—è –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [editNote, setEditNote] = useState<NoteType>({...note})

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSave = async () => {
    const updatedNote: NoteType = {
      ...note,
      title: editNote.title.trim() ? editNote.title : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
      plot: editNote.plot.trim() ? editNote.plot : "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
      image: file === null ? "" : editNote.image
    }

    if (file) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ FormData
      const formData = new FormData()
      formData.append("title", updatedNote.title)
      formData.append("plot", updatedNote.plot)
      formData.append("image", file)
      // console.log(file)
      try {
        const response = await fetch(`/notes/${note._id}`, {
          method: "PUT",
          body: formData,
        })
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!")
        // const result = await response.json()
        // console.log(result)
      } catch (error) {
        console.error(error)
      }
    } else {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
      const response = await fetch(`/notes/${note._id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedNote),
      })
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!")
      // const result = await response.json()
      // console.log(result)
    }

    updateSelectedNote(updatedNote)
    fetchNotes()
    setIsEditing(false)
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const handleDeleteImage = async () => {
    setEditNote(prev => ({ ...prev, image: "" }))
    setFile(null)
    setFileName("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0] || null
    setFile(selectedFile)
    setFileName(selectedFile ? `üìÑ ${selectedFile.name}` : "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
  }

  return (
    <div className="note-info">
      <img 
        src="src/images/back-img.png"
        className="back-btn" 
        onClick={onBack}>
      </img>
      <div >
        {isEditing ? (
          <div className="note-edit">
            <input 
              className="edit-title" 
              value={editNote.title} 
              onChange={(e) => setEditNote({...editNote, title: e.target.value})} 
            />
            <textarea 
              className="edit-plot" 
              value={editNote.plot} 
              onChange={(e) => setEditNote({...editNote, plot: e.target.value})}  
            />
            {editNote.image ? (
              <div className="edit-img">
                <img 
                  className="note-edit-img"
                  src={`http://localhost:5000/${editNote.image}`}
                />
                <img 
                  src="src/images/delete-img.png"  
                  className="delete-img" 
                  onClick={handleDeleteImage}>
                </img>
              </div>
            ) : (
                <label className="add-img">
                <input type="file" onChange={handleFileChange} />{fileName}
                </label>
            )}
            <div className="save-cancel-btns">
              <button className="save-btn" onClick={handleSave}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button 
                className="cancel-btn"
                onClick={() => {
                  setIsEditing(false)
                  setEditNote(note)
                  setFile(null)
                  setFileName("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                }}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        ) : (
          <div className="note-details">
            <div className="note-details-title">{note.title}</div>
            <div className="note-details-plot">{note.plot}</div>
            {note.image && (
                <img
                src={`http://localhost:5000/${note.image}`}
                className="note-details-img"
              />
            )}
            <button 
              className="edit-btn" 
              onClick={() => {
                setIsEditing(true) 
                setEditNote(note)
                }}>
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>
        )}
        </div>
      </div>
    )
}

export default FullNote
